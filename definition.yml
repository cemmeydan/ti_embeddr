id: embeddr
docker_repository: dynverse/ti_embeddr
container_url: https://github.com/dynverse/ti_embeddr
name: Embeddr
type: algorithm
doi: '10.1101/027219'
google_scholar_cluster_id: '5302171132481221018'
platform: R
trajectory_types:
- linear
topology_inference: fixed
license: GPL-3
preprint_date: '2015-09-18'
code_url: https://github.com/kieranrcampbell/embeddr
parameters:
  ndim:
    type: integer
    default: 2
    upper: 10
    lower: 2
    description: Dimension of the embedded space, default is 2
  kernel:
    type: discrete
    default: nn
    values:
    - nn
    - dist
    - heat
    description: |-
      The choice of kernel. 'nn' will give nearest neighbours, 'dist' gives minimum distance and
      'heat' gives a heat kernel. Discussed in detail in 'Laplacian Eigenmaps and Spectral Techniques for Embedding and Clustering',
      Belkin & Niyogi
  metric:
    type: discrete
    default: correlation
    values:
    - correlation
    - euclidean
    - cosine
    description: |-
      The metric with which to assess 'closeness' for nearest neighbour selection, one of
      'correlation' (pearson) or 'euclidean'. Default is 'correlation'.
  nn_pct:
    type: numeric
    default: 0.0e+00
    upper: 1.0
    lower: -2.0
    description: The percentage of cells to use as tge number of nearest neighbours
      if kernel == 'nn'.
  eps:
    type: numeric
    default: 0.0e+00
    upper: 5.0
    lower: -5.0
    description: Maximum distance parameter if kernel == 'dist'
  t:
    type: numeric
    default: 0.0e+00
    upper: 5.0
    lower: -5.0
    description: '''time'' for heat kernel if kernel == ''heat'''
  symmetrize:
    type: discrete
    default: mean
    values:
    - mean
    - ceil
    - floor
    description: |-
      How to make the adjacency matrix symmetric. Note that slightly
      counterintuitively, node i having node j as a nearest neighbour doesn't guarantee node
      j has node i. There are several ways to get round this:
      \itemize{
      \item \code{mean} If the above case occurs make the link weight 0.5 so the adjacency matrix becomes \eqn{0.5(A + A')}
      \item \code{ceil} If the above case occurs set the link weight to 1 (ie take the ceiling of the mean case)
      \item \code{floor} If the above case occurs set the link weight to 0 (ie take the floor of the mean case)
      }
  measure_type:
    type: discrete
    default: unorm
    values:
    - unorm
    - norm
    description: |-
      Type of laplacian eigenmap, which corresponds to the constraint on the eigenvalue problem. If
      type is 'unorm' (default), then the graph measure used is the identity matrix, while if type is 'norm' then the measure
      used is the degree matrix.
  thresh:
    type: numeric
    default: 0.001
    upper: 100000.0
    lower: 1.0e-05
    distribution: expuniform
    description: convergence threshold on shortest distances to the curve.
  maxit:
    type: integer
    default: 10
    upper: 50
    lower: 0
    description: maximum number of iterations.
  stretch:
    type: numeric
    default: 2.0
    upper: 5.0
    lower: 0.0e+00
    description: |-
      a factor by which the curve can be extrapolated when
      points are projected.  Default is 2 (times the last segment
      length). The default is 0 for \code{smoother} equal to
      \code{"periodic_lowess"}.
  smoother:
    type: discrete
    default: smooth.spline
    values:
    - smooth.spline
    - lowess
    - periodic.lowess
    description: |-
      choice of smoother. The default is
      \code{"smooth_spline"}, and other choices are \code{"lowess"} and
      \code{"periodic_lowess"}. The latter allows one to fit closed curves.
      Beware, you may want to use \code{
      iter = 0} with \code{lowess()}.
input:
  format: rds
  required: counts
output:
  format: rds
  outputs:
  - linear_trajectory
  - dimred
  - timings
wrapper_type: linear_trajectory
authors:
- given: Kieran
  family: Campbell
  email: kicampbell@bccrc.ca
  github: kieranrcampbell
